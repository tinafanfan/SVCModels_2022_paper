# 0. Final model ----
## prepare data(need run PART1, but don't need PART2) ##
formula = price_unit ~ build_area + age + floor_th
criterion_setting = "bic"
M.up = 220
space.train_mt <- as.matrix(space.train)
g.train <- autoFRK::mrts(knot = space.train_mt, k = M.up, x = space.train_mt) # NOTE: 用於surface estimation
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data.train) == y_name)
Y.train <- data.train[,y_ind]
formula.modelmatrix <- as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
X.train <- model.matrix(formula.modelmatrix, data.train)
dummyvar.train <- set.dummy(y_name, X.train, data.train)[[1]] # source(file = "source_set_dummy.R") # dummyvar
dummyvar_index <- set.dummy(y_name, X.train, data.train)[[2]] # NOTE: 用於 function中判斷是否為類別變數的依據
p. <- ncol(dummyvar.train) # p_X <- ncol(X) # 原本X有幾個變數(並非看dummy)
Z.train <- log(Y.train)
## Train model ##
M.hat <- c(181,9,18,1)
# M.hat <- c(181,1,1,1)
# M.hat <- c(1,1,1,1) # global model
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model <- lm(Z.train ~ phi.train[,-1])
coef.est <- model$coefficients
sig.hat <- summary(model)$sigma
z.hat <- model$fitted.values
var.est <- summary(model)$sigma^2
double.inv.H <- solve(t(phi.train) %*% phi.train)
b.term.train <- diag(phi.train %*% double.inv.H %*% t(phi.train))
Z.hat.train <- as.numeric(phi.train %*% coef.est) - 0.5*var.est*b.term.train
Y.hat.train <- exp(as.numeric(phi.train %*% coef.est) - 0.5*var.est*b.term.train + 0.5*var.est)
## Test model ##
# space.test_mt <- as.matrix(space.test)
# g.test  <- mrts(knot = space.train_mt, k = max(M.hat), x = space.test_mt) # NOTE: 用於surface estimation
# # g.test  <- mrts(knot = space.train_mt, k = 5, x = space.test_mt) # use in global model
# formula.modelmatrix <- as.formula(paste0("~ 1 + build_area + age + floor_th"))
# X.test <- model.matrix(formula.modelmatrix, data.test)
# phi.test <- compute.datamatrix(X.test, M.hat, g.test)
#
# b.term.test <- diag(phi.test %*% double.inv.H %*% t(phi.test))
# Z.hat.test <- as.numeric(phi.test %*% coef.est) - 0.5*var.est*b.term.test
# Y.hat.test <- exp(as.numeric(phi.test %*% coef.est) - 0.5*var.est*b.term.test + 0.5*var.est)
model_1
M.hat <- c(181,0,18,1)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_1 <- lm(Z.train ~ phi.train[,-1])
anova(model_1, model)
M.hat <- c(181,9,0,1)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_2 <- lm(Z.train ~ phi.train[,-1])
anova(model_2, model)
M.hat <- c(181,9,18,0)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_3 <- lm(Z.train ~ phi.train[,-1])
anova(model_3, model)
# H0: Mj=1
M.hat <- c(181,1,18,1)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_1 <- lm(Z.train ~ phi.train[,-1])
anova(model_1, model)
M.hat <- c(181,9,1,1)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_2 <- lm(Z.train ~ phi.train[,-1])
anova(model_2, model)
#PART1: prepare loading data ----
setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
rm(list=ls())
# 1. packages ----
library(autoFRK) # mrts: multi-resolution basis functions
library(fastDummies) # dummy_cols: used in function "set.dummy"
library(stringr)# str_replace_all: used in function "set.dummy"
library(matrixcalc)# hadamard.prod: used in function "compute.datamatrix"
# Packages <- c("ggplot2", "sjPlot", "sjmisc", "sjlabelled","autoFRK","matrixcalc", "fastDummies","stringr","reshape","spgwr","GWmodel","MASS","lubridate", "scoringRules","spmoran","varycoef","doParallel", "biganalytics")
# invisible(lapply(Packages, library, character.only = TRUE))
set.seed(10)
# setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
source(file = "function_updated.R")
# 2. import data ----
import.data <- read.csv(file = "108_北北基_EXPORT_ADD_FINAL_utf8.csv", header = T)
## select sub-dataset
### variables
raw.data <- import.data[which(import.data$縣市 == "臺北市" | import.data$縣市 == "新北市"),]
raw.data <- raw.data[which(raw.data$移轉層次_ADD > 0),]
### location range
loc.domain <- which(raw.data$X > 282000 & raw.data$X < 320000 & raw.data$Y > 2755000 & raw.data$Y < 2790000)
space <- raw.data[loc.domain,c(11,12)]
raw.data <- raw.data[loc.domain,]
# 3. seperate data ----
number.data  <- nrow(raw.data)*2/3
number.test <- nrow(raw.data)*1/3
I <- sample(1:nrow(raw.data), number.data)
# training data
data.train <- raw.data[I, c(7,9,10,13)]; space.train <- raw.data[I, c(11,12)]
colnames(data.train) <- c("price_unit","build_area","age","floor_th")
data.train$price_unit <- data.train$price_unit/10000
# test data
data.test  <- raw.data[-I, c(7,9,10,13)]; space.test <- raw.data[-I, c(11,12)]
colnames(data.test)   <- c("price_unit","build_area","age","floor_th")
data.test$price_unit <- data.test$price_unit/10000
# PART3:Final model and estimation (手動輸入M.hat)
# 0. Final model ----
## prepare data(need run PART1, but don't need PART2) ##
formula = price_unit ~ build_area + age + floor_th
criterion_setting = "bic"
M.up = 200
space.train_mt <- as.matrix(space.train)
g.train <- autoFRK::mrts(knot = space.train_mt, k = M.up, x = space.train_mt) # NOTE: 用於surface estimation
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data.train) == y_name)
Y.train <- data.train[,y_ind]
formula.modelmatrix <- as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
X.train <- model.matrix(formula.modelmatrix, data.train)
dummyvar.train <- set.dummy(y_name, X.train, data.train)[[1]] # source(file = "source_set_dummy.R") # dummyvar
dummyvar_index <- set.dummy(y_name, X.train, data.train)[[2]] # NOTE: 用於 function中判斷是否為類別變數的依據
p. <- ncol(dummyvar.train) # p_X <- ncol(X) # 原本X有幾個變數(並非看dummy)
## Train model ##
M.hat <- c(181, 9, 94, 6) # square ini:1
# M.hat <- c(186, 19, 94, 6) # square ini:300
# M.hat <- c(92,10,36,186) # ini:300
# M.hat <- c(188,22,85,4) # ini:1
# M.hat <- c(91, 10,37,188) # ini:150
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model <- lm(Y.train ~ phi.train[,-1])
M.hat <- c(181, 0, 94, 6)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_1 <- lm(Z.train ~ phi.train[,-1])
anova(model_1, model)
M.hat <- c(181, 9, 0, 6)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_2 <- lm(Z.train ~ phi.train[,-1])
anova(model_2, model)
M.hat <- c(181, 9, 94, 0)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_3 <- lm(Z.train ~ phi.train[,-1])
anova(model_3, model)
setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei/LogNormalAssumption")
load(file="result_sigmaupdate.RData")
# H0: Mj=0
M.hat <- c(181, 0, 94, 6)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_1 <- lm(Y.train ~ phi.train[,-1])
anova(model_1, model)
M.hat <- c(181, 9, 0, 6)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_2 <- lm(Y.train ~ phi.train[,-1])
anova(model_2, model)
M.hat <- c(181, 9, 94, 0)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_3 <- lm(Y.train ~ phi.train[,-1])
anova(model_3, model)
setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei/NormalAssumption")
save.image(file="result_sigmaupdate.RData")
rm(list=ls())
#PART1: prepare loading data ----
setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
rm(list=ls())
# 1. packages ----
library(autoFRK) # mrts: multi-resolution basis functions
library(fastDummies) # dummy_cols: used in function "set.dummy"
library(stringr)# str_replace_all: used in function "set.dummy"
library(matrixcalc)# hadamard.prod: used in function "compute.datamatrix"
# Packages <- c("ggplot2", "sjPlot", "sjmisc", "sjlabelled","autoFRK","matrixcalc", "fastDummies","stringr","reshape","spgwr","GWmodel","MASS","lubridate", "scoringRules","spmoran","varycoef","doParallel", "biganalytics")
# invisible(lapply(Packages, library, character.only = TRUE))
set.seed(10)
# setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
source(file = "function_updated.R")
# 2. import data ----
import.data <- read.csv(file = "108_北北基_EXPORT_ADD_FINAL_utf8.csv", header = T)
## select sub-dataset
### variables
raw.data <- import.data[which(import.data$縣市 == "臺北市" | import.data$縣市 == "新北市"),]
raw.data <- raw.data[which(raw.data$移轉層次_ADD > 0),]
### location range
loc.domain <- which(raw.data$X > 282000 & raw.data$X < 320000 & raw.data$Y > 2755000 & raw.data$Y < 2790000)
space <- raw.data[loc.domain,c(11,12)]
raw.data <- raw.data[loc.domain,]
# 3. seperate data ----
number.data  <- nrow(raw.data)*2/3
number.test <- nrow(raw.data)*1/3
I <- sample(1:nrow(raw.data), number.data)
# training data
data.train <- raw.data[I, c(7,9,10,13)]; space.train <- raw.data[I, c(11,12)]
colnames(data.train) <- c("price_unit","build_area","age","floor_th")
data.train$price_unit <- data.train$price_unit/10000
# test data
data.test  <- raw.data[-I, c(7,9,10,13)]; space.test <- raw.data[-I, c(11,12)]
colnames(data.test)   <- c("price_unit","build_area","age","floor_th")
data.test$price_unit <- data.test$price_unit/10000
# PART3:Final model and estimation (手動輸入M.hat)
# 0. Final model ----
## prepare data(need run PART1, but don't need PART2) ##
formula = price_unit ~ build_area + age + floor_th
criterion_setting = "bic"
M.up = 200
space.train_mt <- as.matrix(space.train)
g.train <- autoFRK::mrts(knot = space.train_mt, k = M.up, x = space.train_mt) # NOTE: 用於surface estimation
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data.train) == y_name)
Y.train <- data.train[,y_ind]
formula.modelmatrix <- as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
X.train <- model.matrix(formula.modelmatrix, data.train)
dummyvar.train <- set.dummy(y_name, X.train, data.train)[[1]] # source(file = "source_set_dummy.R") # dummyvar
dummyvar_index <- set.dummy(y_name, X.train, data.train)[[2]] # NOTE: 用於 function中判斷是否為類別變數的依據
p. <- ncol(dummyvar.train) # p_X <- ncol(X) # 原本X有幾個變數(並非看dummy)
## Train model ##
M.hat <- c(181, 9, 94, 6) # square ini:1
# M.hat <- c(186, 19, 94, 6) # square ini:300
# M.hat <- c(92,10,36,186) # ini:300
# M.hat <- c(188,22,85,4) # ini:1
# M.hat <- c(91, 10,37,188) # ini:150
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model <- lm(Y.train ~ phi.train[,-1])
# H0: Mj=0
M.hat <- c(181, 0, 94, 6)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_1 <- lm(Y.train ~ phi.train[,-1])
anova(model_1, model)
M.hat <- c(181, 9, 0, 6)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_2 <- lm(Y.train ~ phi.train[,-1])
anova(model_2, model)
M.hat <- c(181, 9, 94, 0)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_3 <- lm(Y.train ~ phi.train[,-1])
anova(model_3, model)
# H0: Mj=1
M.hat <- c(181, 1, 94, 6)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_1 <- lm(Y.train ~ phi.train[,-1])
anova(model_1, model)
M.hat <- c(181, 9, 1, 6)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_2 <- lm(Y.train ~ phi.train[,-1])
anova(model_2, model)
M.hat <- c(181, 9, 94, 1)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_3 <- lm(Y.train ~ phi.train[,-1])
anova(model_3, model)
#PART1: prepare loading data ----
setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
rm(list=ls())
# 1. packages ----
library(autoFRK) # mrts: multi-resolution basis functions
library(fastDummies) # dummy_cols: used in function "set.dummy"
library(stringr)# str_replace_all: used in function "set.dummy"
library(matrixcalc)# hadamard.prod: used in function "compute.datamatrix"
# Packages <- c("ggplot2", "sjPlot", "sjmisc", "sjlabelled","autoFRK","matrixcalc", "fastDummies","stringr","reshape","spgwr","GWmodel","MASS","lubridate", "scoringRules","spmoran","varycoef","doParallel", "biganalytics")
# invisible(lapply(Packages, library, character.only = TRUE))
set.seed(10)
# setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
source(file = "function_updated.R")
# 2. import data ----
import.data <- read.csv(file = "108_北北基_EXPORT_ADD_FINAL_utf8.csv", header = T)
## select sub-dataset
### variables
raw.data <- import.data[which(import.data$縣市 == "臺北市" | import.data$縣市 == "新北市"),]
raw.data <- raw.data[which(raw.data$移轉層次_ADD > 0),]
### location range
loc.domain <- which(raw.data$X > 282000 & raw.data$X < 320000 & raw.data$Y > 2755000 & raw.data$Y < 2790000)
space <- raw.data[loc.domain,c(11,12)]
raw.data <- raw.data[loc.domain,]
# 3. seperate data ----
number.data  <- nrow(raw.data)*2/3
number.test <- nrow(raw.data)*1/3
I <- sample(1:nrow(raw.data), number.data)
# training data
data.train <- raw.data[I, c(7,9,10,13)]; space.train <- raw.data[I, c(11,12)]
colnames(data.train) <- c("price_unit","build_area","age","floor_th")
data.train$price_unit <- data.train$price_unit/10000
# test data
data.test  <- raw.data[-I, c(7,9,10,13)]; space.test <- raw.data[-I, c(11,12)]
colnames(data.test)   <- c("price_unit","build_area","age","floor_th")
data.test$price_unit <- data.test$price_unit/10000
# PART3:Final model and estimation (手動輸入M.hat)
# 0. Final model ----
## prepare data(need run PART1, but don't need PART2) ##
formula = price_unit ~ build_area + age + floor_th
criterion_setting = "bic"
M.up = 200
space.train_mt <- as.matrix(space.train)
g.train <- autoFRK::mrts(knot = space.train_mt, k = M.up, x = space.train_mt) # NOTE: 用於surface estimation
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data.train) == y_name)
Y.train <- data.train[,y_ind]
formula.modelmatrix <- as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
X.train <- model.matrix(formula.modelmatrix, data.train)
dummyvar.train <- set.dummy(y_name, X.train, data.train)[[1]] # source(file = "source_set_dummy.R") # dummyvar
dummyvar_index <- set.dummy(y_name, X.train, data.train)[[2]] # NOTE: 用於 function中判斷是否為類別變數的依據
p. <- ncol(dummyvar.train) # p_X <- ncol(X) # 原本X有幾個變數(並非看dummy)
## Train model ##
M.hat <- c(181, 9, 94, 6) # square ini:1
# M.hat <- c(186, 19, 94, 6) # square ini:300
# M.hat <- c(92,10,36,186) # ini:300
# M.hat <- c(188,22,85,4) # ini:1
# M.hat <- c(91, 10,37,188) # ini:150
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model <- lm(Y.train ~ phi.train[,-1])
coef.est <- model$coefficients
Y.hat.train <- as.numeric(phi.train %*% coef.est)
sig.hat <- summary(model)$sigma
## Test model ##
space.test_mt <- as.matrix(space.test)
g.test  <- mrts(knot = space.train_mt, k = max(M.hat), x = space.test_mt) # NOTE: 用於surface estimation
formula.modelmatrix <- as.formula(paste0("~ 1 + build_area + age + floor_th"))
X.test <- model.matrix(formula.modelmatrix, data.test)
Y.test <- data.test$price_unit
phi.test <- compute.datamatrix(X.test, M.hat, g.test)
Y.hat.test <-  as.numeric(phi.test %*% coef.est)
## All surface ##
x.min <- 282000
x.max <- 320000
y.min <- 2754000
y.max <- 2790000
x.seq <- seq(x.min, x.max,length.out = 130)
y.seq <- seq(y.min, y.max,length.out = 130)
# system.time(expand.grid.alt(x.seq,y.seq))
space.all <- expand.grid(x.seq, y.seq)
colnames(space.all) <- c("X","Y")
g.all  <- mrts(knot = space.train_mt, k = max(M.hat), x = space.all) # NOTE: 用於surface estimation
# 1. criterion ----
loglikelihood <- -length(Y.train)/2*log(2*pi*sig.hat^2) - sum((Y.train-Y.hat.train)^2)/(2*sig.hat^2)
BIC(model)
-2*logLik(model)[[1]] + log(nrow(X.train))*(ncol(phi.train[,-1])+2)
# 2. RMSE/ RMSPE ----
RMSE(data.train$price_unit, Y.hat.train) # 2.65
RMSE(data.test$price_unit, Y.hat.test) # 2.69
mean(scoringRules::crps(data.test$price_unit,
family = "normal",
mean = Y.hat.test,
sd = sig))
# 3. estimated SVC ----
svc.est.train <- matrix(NA, nrow(g.train), p.)
for(i in 1:length(M.hat)){
if(i == 1){
c <- 0
}else{
c <- sum(M.hat[1:(i-1)])
}
coef_onevar <- coef.est[(c+1):(c+M.hat[i])]
if(M.hat[i]==0){
svc.est.train[,i] <- rep(0, nrow(g.train))
}else{
svc.est.train[,i] <- matrix(g.train[,1:M.hat[i]], ncol = M.hat[i])%*%coef_onevar # 根據k的數量選幾個g
}
}
svc.est.test <- matrix(NA, nrow(g.test), p.)
for(i in 1:length(M.hat)){
if(i == 1){
c <- 0
}else{
c <- sum(M.hat[1:(i-1)])
}
coef_onevar <- coef.est[(c+1):(c+M.hat[i])]
if(M.hat[i]==0){
svc.est.test[,i] <- rep(0, nrow(g.test))
}else{
svc.est.test[,i] <- matrix(g.test[,1:M.hat[i]], ncol = M.hat[i])%*%coef_onevar # 根據k的數量選幾個g
}
}
svc.est.all <- matrix(NA, nrow(g.all), p.)
for(i in 1:length(M.hat)){
if(i == 1){
c <- 0
}else{
c <- sum(M.hat[1:(i-1)])
}
coef_onevar <- coef.est[(c+1):(c+M.hat[i])]
if(M.hat[i]==0){
svc.est.all[,i] <- rep(0, nrow(g.all))
}else{
svc.est.all[,i] <- matrix(g.all[,1:M.hat[i]], ncol = M.hat[i])%*%coef_onevar # 根據k的數量選幾個g
}
}
# 4. CI SVC ----
dof <- nrow(X.train) - sum(M.hat)
t.lower <- qt(p = 0.025, df = dof)
t.upper <- qt(p = 0.975, df = dof)
sig.hat <- sqrt(sum((data.train$price_unit - Y.hat.train)^2)/(dof))
double.inv.H <- solve(t(phi.train) %*% phi.train)
svc.ci.upper.train <- matrix(NA, nrow(g.train), p.)
svc.ci.lower.train <- matrix(NA, nrow(g.train), p.)
svc.ci.upper.test  <- matrix(NA, nrow(g.test) , p.)
svc.ci.lower.test  <- matrix(NA, nrow(g.test) , p.)
svc.ci.upper.all   <- matrix(NA, nrow(g.all)  , p.)
svc.ci.lower.all   <- matrix(NA, nrow(g.all)  , p.)
for(i in 1:length(M.hat)){
if(i==1){
c <- 1
}else{
c <- sum(M.hat[1:(i-1)])
}
if(M.hat[i]==0){
svc.ci.upper.train[,i] <- rep(0, nrow(g.train))
svc.ci.lower.train[,i] <- rep(0, nrow(g.train))
svc.ci.upper.test[,i]  <- rep(0, nrow(g.test))
svc.ci.lower.test[,i]  <- rep(0, nrow(g.test))
svc.ci.upper.all[,i]   <- rep(0, nrow(g.all))
svc.ci.lower.all[,i]   <- rep(0, nrow(g.all))
}else{
g.j.train <- matrix(g.train[, 1:M.hat[i]], ncol = M.hat[i])
g.j.test  <- matrix(g.test[, 1:M.hat[i]], ncol = M.hat[i])
g.j.all   <- matrix(g.all[, 1:M.hat[i]], ncol = M.hat[i])
H.middle <- double.inv.H[(c+1):(c+M.hat[i]), (c+1):(c+M.hat[i])]
st.train <- sqrt(diag(g.j.train %*% H.middle %*% t(g.j.train)))
svc.ci.upper.train[,i] <- svc.est.train[,i] + t.upper * sig.hat * st.train
svc.ci.lower.train[,i] <- svc.est.train[,i] + t.lower * sig.hat * st.train
st.test <- sqrt(diag(g.j.test %*% H.middle %*% t(g.j.test)))
svc.ci.upper.test[,i] <- svc.est.test[,i] + t.upper * sig.hat * st.test
svc.ci.lower.test[,i] <- svc.est.test[,i] + t.lower * sig.hat * st.test
st.all <- sqrt(diag(g.j.all %*% H.middle %*% t(g.j.all)))
svc.ci.upper.all[,i] <- svc.est.all[,i] + t.upper * sig.hat * st.all
svc.ci.lower.all[,i] <- svc.est.all[,i] + t.lower * sig.hat * st.all
}
}
# par(mfrow=c(1,4))
# boxplot(svc.ci.upper.train[,1]-svc.ci.lower.train[,1])
# boxplot(svc.ci.upper.train[,2]-svc.ci.lower.train[,2])
# boxplot(svc.ci.upper.train[,3]-svc.ci.lower.train[,3])
# boxplot(svc.ci.upper.train[,4]-svc.ci.lower.train[,4])
#
# par(mfrow=c(1,4))
# boxplot((svc.ci.upper.train[,1]-svc.ci.lower.train[,1])/svc.est.train[,1])
# boxplot((svc.ci.upper.train[,2]-svc.ci.lower.train[,2])/svc.est.train[,2])
# boxplot((svc.ci.upper.train[,3]-svc.ci.lower.train[,3])/svc.est.train[,3])
# boxplot((svc.ci.upper.train[,4]-svc.ci.lower.train[,4])/svc.est.train[,4])
setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei/NormalAssumption")
save.image(file="result_sigmaupdate.RData")
gc()
library(mixtools)
data(faithful)
waiting
attach(faithful)
waiting
normalmixEM(waiting)
waiting_model1 <- normalmixEM(waiting)
plot(waiting_model1, density=TRUE, cex.axis=1.4, cex.lab=1.4, cex.main=1.8,
main2="Time between Old Faithful eruptions", xlab2="Minutes")
waiting_model1$mu
waiting_model1$posterior
x <- rmvnorm(100, 0, 1)
x <- rmvnorm(100, c(0,0), c(1,1))
x <- rmvnorm(2, c(0,0), c(1,1))
x <- rmvnorm(2, c(0,0), matrix(c(1,0,0,1), 2, 2))
x
x <- rmvnorm(10, c(0,0), matrix(c(1,0,0,1), 2, 2))
x
x <- rmvnorm(100, c(0,0), matrix(c(2,0,0,2), 2, 2))
y <- rmvnorm(100, c(5,5), matrix(c(1,0,0,1), 2, 2))
bivn <- rbind(x,y)
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)
# hw2
library(MASS)
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)
image(bivn.kde, col = rev(heat.colors(100)), xlim = c(3,3.8), ylim = c(-0.1,0.02))  # from base graphics package
box()
contour(bivn.kde, add = TRUE, col = "black")     # from base graphics package
bivn
image(bivn.kde, col = rev(heat.colors(100)))
box()
contour(bivn.kde, add = TRUE, col = "black")     # from base graphics package
mvnormalmixEM(bivn)
model <- mvnormalmixEM(bivn)
model$mu
#PART1: prepare loading data ----
setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
rm(list=ls())
# 1. packages ----
library(autoFRK) # mrts: multi-resolution basis functions
library(fastDummies) # dummy_cols: used in function "set.dummy"
library(stringr)# str_replace_all: used in function "set.dummy"
library(matrixcalc)# hadamard.prod: used in function "compute.datamatrix"
# Packages <- c("ggplot2", "sjPlot", "sjmisc", "sjlabelled","autoFRK","matrixcalc", "fastDummies","stringr","reshape","spgwr","GWmodel","MASS","lubridate", "scoringRules","spmoran","varycoef","doParallel", "biganalytics")
# invisible(lapply(Packages, library, character.only = TRUE))
set.seed(10)
# setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
source(file = "function_updated.R")
# 2. import data ----
import.data <- read.csv(file = "108_北北基_EXPORT_ADD_FINAL_utf8.csv", header = T)
## select sub-dataset
### variables
raw.data <- import.data[which(import.data$縣市 == "臺北市" | import.data$縣市 == "新北市"),]
raw.data <- raw.data[which(raw.data$移轉層次_ADD > 0),]
### location range
loc.domain <- which(raw.data$X > 282000 & raw.data$X < 320000 & raw.data$Y > 2755000 & raw.data$Y < 2790000)
space <- raw.data[loc.domain,c(11,12)]
raw.data <- raw.data[loc.domain,]
# 3. seperate data ----
number.data  <- nrow(raw.data)*2/3
number.test <- nrow(raw.data)*1/3
I <- sample(1:nrow(raw.data), number.data)
# training data
data.train <- raw.data[I, c(7,9,10,13)]; space.train <- raw.data[I, c(11,12)]
colnames(data.train) <- c("price_unit","build_area","age","floor_th")
data.train$price_unit <- data.train$price_unit/10000
# test data
data.test  <- raw.data[-I, c(7,9,10,13)]; space.test <- raw.data[-I, c(11,12)]
colnames(data.test)   <- c("price_unit","build_area","age","floor_th")
data.test$price_unit <- data.test$price_unit/10000
head(data.train)
data.train$set <- "train"
head(data.train)
data.test$set <- "test"
data.prep <- as.data.frame(rbind(data.train, data.test))
dim(data.prep)
dim(data.train)
dim(data.test)
head(data.prep)
setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
write.csv(data.prep, file = "data_train_test.csv")
