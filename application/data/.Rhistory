t(ff)%*%ff
sum(t(ff)%*%ff)-90
ff
sum(ff[,10])
ff <- mrts(knot = loc, k=9)
t(ff)%*%ff
sum(t(ff)%*%ff)-90
sum(t(ff)%*%ff)-81
knit_with_parameters('~/Desktop/Untitled.Rmd')
10^0.1
10^(0.16)
10^(-0.16)
1/0.691831
10^(-0.2)
10(0.2)
10^(0.2)
rep(c("Taiwan", "US"),12)
rep(c("Taiwan", "US"), each = 12)
rep(1:12,times = 2)
rep(c("Taiwan", "US"), each = 24)
rep(c(1900, 1901, 1900, 1901), each = 12)
rep(1:12,times = 2)
rnorm(48, 0, 1)
df <- data.frame(country = rep(c("Taiwan", "US"), each = 24),
year = rep(c(1900, 1901, 1900, 1901), each = 12),
month = rep(1:12, times = 4),
temp = rnorm(48, 0, 1))
df
library(dplyr)
df %>% group_by(country, year)
output <- df %>% group_by(country, year)
output
output <- df %>%
group_by(country, year) %>%
summarise(temp_month = mean(temp))
output
mean(df$temp[1:12])
mean(df$temp[37:48])
mean(df$temp[25:36])
output$temp_month
x1 = cbind(rep(1,4), c(1,3,5,2), c(3,9,4,1))
x1
x2 = cbind(rep(1,4), rep(0,4), rep(0,4))
x2%*%solve(t(x2)%*%x2)%*%t(x2)
x2
t(x2)%*%x2
solve(t(x2)%*%x2)
1/(1+exp(-0.5))
data <- data.frame(group = c("A1", "A2"), value = c(12,33))
substr(data$group, 1, 2)
data <- data.frame(group = c("A1", "A2"), value = c(12,33))
substr(data$group, 1, 2)
substr(data$group, 2, 2)
data[substr(data$group, 2, 2)==1,"value"]
X = data[substr(data$group, 2, 2)==1,]
X <- data[substr(data$group, 2, 2)==1,]
X
data <- data.frame(group = c("A1", "A2", "A1"), value = c(12,33, 41))
data <- data.frame(group = c("A1", "A2", "A1"), value = c(12,33, 41))
X <- data[substr(data$group, 2, 2)==1,]
Y <- data[substr(data$group, 2, 2)==2,]
X
Y
data
data <- data.frame(group = c("A1", "A2", "A1"), value = c(12,33, 41))
data
X <- data[substr(data$group, 2, 2)==1,]
Y <- data[substr(data$group, 2, 2)==2,]
X
Y
X <- data[substr(data$group, 2, 2)==union(1,2,3),]
X
X <- data[substr(data$group, 2, 2)==c(1,2,3),]
X
Y <- data[substr(data$group, 2, 2)==4,]
Y
data <- data.frame(group = c("A1", "A2", "A1","A3", "A4"), value = c(12,33, 41))
data <- data.frame(group = c("A1", "A2", "A1","A3", "A4"),
value = c(12, 33, 41, 21, 33))
data
X <- data[substr(data$group, 2, 2)==c(1,2,3),]
Y <- data[substr(data$group, 2, 2)==4,]
X
Y
X <- data[substr(data$group, 2, 2) in c(1,2,3),]
X <- data[substr(data$group, 2, 2) %in% c(1,2,3),]
X
data <- data.frame(group = c("A1", "A2", "A1","A3", "A4"),
value = c(12, 33, 41, 21, 33))
data
X <- data[substr(data$group, 2, 2) %in% c(1,2,3),]
Y <- data[substr(data$group, 2, 2)==4,]
X
Y
t.test(X$value,Y$value)
data <- data.frame(group = c("A1", "A2", "A1","A3", "A4", "A4"),
value = c(12, 33, 41, 21, 33, 10))
data
X <- data[substr(data$group, 2, 2) %in% c(1,2,3),]
Y <- data[substr(data$group, 2, 2)==4,]
X
Y
t.test(X$value,Y$value)
x <- seq(1,100)
x
y <- seq(0,1, 100)
y <- seq(0,1, length.out = 100)
xy <- expand.grid(x, y)
data <- data.frame(loc = xy, value = rnorn(nrowm(xy),0,1))
data <- data.frame(loc = xy, value = rnorm(nrowm(xy),0,1))
data <- data.frame(loc = xy, value = rnorm(nrow(xy),0,1))
data[1,]
data <- data.frame(x = xy$Var1, y = xy$Var2, value = rnorm(nrow(xy),0,1))
plot(data$x, data$y)
ggplot(mtcars, aes(x=data$x, y=data$y, color=data$value)) +
geom_point() +
scale_color_gradientn(colours = rainbow(5))
library(ggplot2)
ggplot(mtcars, aes(x=data$x, y=data$y, color=data$value)) +
geom_point() +
scale_color_gradientn(colours = rainbow(5))
ggplot(data, aes(x=data$x, y=data$y, color=data$value)) +
geom_point() +
scale_color_gradientn(colours = rainbow(5))
ggplot(data, aes(x=, y=y, color=value)) +
geom_point() +
scale_color_gradientn(colours = rainbow(5))
ggplot(data, aes(x=x, y=y, color=value)) +
geom_point() +
scale_color_gradientn(colours = rainbow(5))
(data$x-mean(data$x))/sd(data$x)
pnorm((data$x-mean(data$x))/sd(data$x))
plot(pnorm((data$x-mean(data$x))/sd(data$x)))
x <- seq(1,10)
y <- seq(0,1, length.out = 10)
xy <- expand.grid(x, y)
data <- data.frame(x = xy$Var1, y = xy$Var2, value = rnorm(nrow(xy),0,1))
ggplot(data, aes(x=x, y=y, color=value)) +
geom_point() +
scale_color_gradientn(colours = rainbow(5))
plot(pnorm((data$x-mean(data$x))/sd(data$x)))
plot(pnorm((x-mean(x))/sd(x)))
pnorm((x-mean(x))/sd(x))
plot(qnorm((x-mean(x))/sd(x)))
plot(pnorm((x-mean(x))/sd(x)))
(x-mean(x))/sd(x)
plot((x-mean(x))/sd(x))
pnorm((x-mean(x))/sd(x))
plot(pnorm((x-mean(x))/sd(x)))
gc()
#PART1: prepare loading data ----
setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
rm(list=ls())
# 1. packages ----
library(autoFRK) # mrts: multi-resolution basis functions
library(fastDummies) # dummy_cols: used in function "set.dummy"
library(stringr)# str_replace_all: used in function "set.dummy"
library(matrixcalc)# hadamard.prod: used in function "compute.datamatrix"
# Packages <- c("ggplot2", "sjPlot", "sjmisc", "sjlabelled","autoFRK","matrixcalc", "fastDummies","stringr","reshape","spgwr","GWmodel","MASS","lubridate", "scoringRules","spmoran","varycoef","doParallel", "biganalytics")
# invisible(lapply(Packages, library, character.only = TRUE))
set.seed(10)
# setwd("~/Documents/3_Research/201810_GWR/script/3_DA_2018_bigtaipei")
source(file = "function_updated.R")
# 2. import data ----
import.data <- read.csv(file = "108_北北基_EXPORT_ADD_FINAL_utf8.csv", header = T)
## select sub-dataset
### variables
raw.data <- import.data[which(import.data$縣市 == "臺北市" | import.data$縣市 == "新北市"),]
raw.data <- raw.data[which(raw.data$移轉層次_ADD > 0),]
### location range
loc.domain <- which(raw.data$X > 282000 & raw.data$X < 320000 & raw.data$Y > 2755000 & raw.data$Y < 2790000)
space <- raw.data[loc.domain,c(11,12)]
raw.data <- raw.data[loc.domain,]
# raw.data <- raw.data[sample(nrow(raw.data), 1000),]
# 3. separate data ----
number.data  <- nrow(raw.data)*2/3
number.test <- nrow(raw.data)*1/3
I <- sample(1:nrow(raw.data), number.data)
# training data
# data.train <- raw.data[I, c(7,9,10,13)]; space.train <- raw.data[I, c(11,12)]
data.train <- raw.data[, c(7,9,10,13)]; space.train <- raw.data[, c(11,12)] # for all data training
colnames(data.train) <- c("price_unit","build_area","age","floor_th")
data.train$price_unit <- data.train$price_unit/10000
# test data
data.test  <- raw.data[-I, c(7,9,10,13)]; space.test <- raw.data[-I, c(11,12)]
colnames(data.test)   <- c("price_unit","build_area","age","floor_th")
data.test$price_unit <- data.test$price_unit/10000
# PART3:Final model and estimation (手動輸入M.hat)
# 0. Final model ----
## prepare data(need run PART1, but don't need PART2) ##
formula = price_unit ~ build_area + age + floor_th
criterion_setting = "bic"
M.up = 186
space.train_mt <- as.matrix(space.train)
g.train <- autoFRK::mrts(knot = space.train_mt, k = M.up, x = space.train_mt) # NOTE: 用於surface estimation
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data.train) == y_name)
Y.train <- data.train[,y_ind]
formula.modelmatrix <- as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
X.train <- model.matrix(formula.modelmatrix, data.train)
# dummyvar.train <- set.dummy(y_name, X.train, data.train)[[1]] # source(file = "source_set_dummy.R") # dummyvar
# dummyvar_index <- set.dummy(y_name, X.train, data.train)[[2]] # NOTE: 用於 function中判斷是否為類別變數的依據
dummyvar.train <- X.train
p. <- ncol(dummyvar.train) # p_X <- ncol(X) # 原本X有幾個變數(並非看dummy)
## Train model ##
M.hat =c(186, 164, 81, 6)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model <- lm(Y.train ~ phi.train[,-1])
coef.est <- model$coefficients
Y.hat.train <- as.numeric(phi.train %*% coef.est)
sig.hat <- summary(model)$sigma
# 1. criterion ----
loglikelihood <- -length(Y.train)/2*log(2*pi*sig.hat^2) - sum((Y.train-Y.hat.train)^2)/(2*sig.hat^2)
BIC(model)
-2*logLik(model)[[1]] + log(nrow(X.train))*(ncol(phi.train[,-1])+2)
formula = price_unit ~ build_area + age + floor_th
criterion_setting = "bic"
M.up = 190
space.train_mt <- as.matrix(space.train)
g.train <- autoFRK::mrts(knot = space.train_mt, k = M.up, x = space.train_mt) # NOTE: 用於surface estimation
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data.train) == y_name)
Y.train <- data.train[,y_ind]
formula.modelmatrix <- as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
X.train <- model.matrix(formula.modelmatrix, data.train)
dummyvar.train <- set.dummy(y_name, X.train, data.train)[[1]] # source(file = "source_set_dummy.R") # dummyvar
dummyvar_index <- set.dummy(y_name, X.train, data.train)[[2]] # NOTE: 用於 function中判斷是否為類別變數的依據
p. <- ncol(dummyvar.train) # p_X <- ncol(X) # 原本X有幾個變數(並非看dummy)
Z.train <- log(Y.train)
## Train model ##
# M.hat <- c(190,9,18,1)
M.hat <- c(189,9,21,1)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model <- lm(Z.train ~ phi.train[,-1])
BIC(model)
M.hat <- c(181,9,18,1)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_reduce <- lm(Z.train ~ phi.train[,-1])
# i=2
sq <- c(2,3,4,5,6,50,100)
for (i in sq){
M.hat <- c(181,9,18,i)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_full <- lm(Z.train ~ phi.train[,-1])
f <- anova(model_reduce, model_full)
# print(f)
# print(sum(M.hat) - 1)
print(f$`Pr(>F)`)
}
# i=2
sq <- c(1, 2,3,4,5,6,50,100)
for (i in sq){
M.hat <- c(181,9,18,i)
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model_full <- lm(Z.train ~ phi.train[,-1])
f <- anova(model_reduce, model_full)
# print(f)
# print(sum(M.hat) - 1)
print(f$`Pr(>F)`)
}
load("MLE_train.RData")
setwd("~/Documents/3_Research/201810_GWR/github-folder-name/result")
load("MLE_train.RData")
setwd("~/Documents/3_Research/201810_GWR/github-folder-name/result")
load("MLE_train.RData")
model.fit$MLE
coef(model.fit)
folder_path = "~/Documents/3_Research/201810_GWR/github-folder-name"
setwd(folder_path)
source("datasets.R")
set.seed(10)
data <- load_data(folder_path)
rownames(data) <- NULL
np <- nrow(data)/10
data = data[sample(nrow(data), np),]
# 資料分析
number.data  <- round(nrow(data)*2/3,0)
number.test <- nrow(data) - number.data
I <- sample(1:nrow(data), number.data)
print(length(I))
# training data
data_attrb_train <- data[I, c(1,2,3,4)]
data_space_train <- data[I, c(5,6)]
# test data
data_attrb_test  <- data[-I, c(1,2,3,4)]
data_space_test <- data[-I, c(5,6)]
##############3 sub for test ##############
# data_attrb_train <- data_attrb_train[1:1000,]
# data_space_train <- data_space_train[1:1000,]
# data_attrb_test <- data_attrb_test[1:100,]
# data_space_test <- data_space_test[1:100,]
##########################################
data_train <- SpatialPointsDataFrame(coords = data_space_train, data = data_attrb_train)
data_test <- SpatialPointsDataFrame(coords = data_space_test, data = data_attrb_test)
library(sp)
set.seed(10)
data <- load_data(folder_path)
rownames(data) <- NULL
np <- nrow(data)/10
data = data[sample(nrow(data), np),]
# 資料分析
number.data  <- round(nrow(data)*2/3,0)
number.test <- nrow(data) - number.data
I <- sample(1:nrow(data), number.data)
print(length(I))
# training data
data_attrb_train <- data[I, c(1,2,3,4)]
data_space_train <- data[I, c(5,6)]
# test data
data_attrb_test  <- data[-I, c(1,2,3,4)]
data_space_test <- data[-I, c(5,6)]
library(varycoef)
locs = data_test@coords
p = 4
SVC_nomean <- predict(object = model.fit, newlocs = locs)[, 1:p]
# data_space_test <- data_space_test[1:100,]
##########################################
data_train <- SpatialPointsDataFrame(coords = data_space_train, data = data_attrb_train)
data_test <- SpatialPointsDataFrame(coords = data_space_test, data = data_attrb_test)
# taper.range <
locs = data_test@coords
p = 4
SVC_nomean <- predict(object = model.fit, newlocs = locs)[, 1:p]
locs
SVC_nomean <- predict(object = model.fit, newlocs = locs)[, 1:p]
predict(object = model.fit, newlocs = locs)
locs = locs[1:10.]
locs = locs[1:10,]
data_train <- SpatialPointsDataFrame(coords = data_space_train, data = data_attrb_train)
data_test <- SpatialPointsDataFrame(coords = data_space_test, data = data_attrb_test)
locs = data_test@coords
locs1 = locs[1:10,]
p = 4
SVC_nomean <- predict(object = model.fit, newlocs = locs)[, 1:p]
locs
SVC_nomean <- predict(object = model.fit, newlocs = locs1)[, 1:p]
locs1
model.fit$coefficients
model.fit$call
predict()
predict
body(predict)
View(predict)
model.fit$data
class(model.fit$data)
length(model.fit$data)
model.fit$data[[1]]
model.fit$data[[2]]
model.fit$data[[3]]
model.fit$data[[4]]
predict(object = model.fit, newlocs = locs)
predict(object = model.fit, newlocs = locs1)
locs = data_test@coords
locs1 = locs[101:121,]
SVC_nomean <- predict(object = model.fit, newlocs = locs)[, 1:p]
# SVC_nomean <- predict(object = model.fit, newlocs = locs)[, 1:p]
SVC_nomean <- predict(object = model.fit, newlocs = locs1)[, 1:p]
n="1"
matrix(0, nrow = n, ncol = n)
model.fit$coefficients
model.fit$fitted[1:3,]
getMethod("predict")
methods(predict)
?methods
methods(class="predict.SVC_mle")
methods(class="predict.SVC_mle*")
methods(class="SVC_mle")
getAnywhere(predict.SVC_mle)
length(model.fit$MLE$call.args$y)
object = model.fit
newlocs = locs
mu <- coef(object)
cov.par <- cov_par(object)
pW <- object$MLE$comp.args$pW
pX <- object$MLE$comp.args$pX
n <- length(object$MLE$call.args$y)
if (is.null(newlocs)) {
newlocs <- object$MLE$call.args$locs
d <- d_cross <- as.matrix(do.call(spam::nearest.dist,
c(list(x = newlocs, delta = 1e+99, upper = NULL),
object$MLE$call.args$control$dist)))
n.new <- n
}
else {
d <- as.matrix(do.call(spam::nearest.dist, c(list(x = object$MLE$call.args$locs,
delta = 1e+99, upper = NULL), object$MLE$call.args$control$dist)))
d_cross <- as.matrix(do.call(spam::nearest.dist, c(list(x = newlocs,
y = object$MLE$call.args$locs, delta = 1e+99), object$MLE$call.args$control$dist)))
n.new <- nrow(newlocs)
}
if (is.null(newlocs)) {
newlocs <- object$MLE$call.args$locs
d <- d_cross <- as.matrix(do.call(spam::nearest.dist,
c(list(x = newlocs, delta = 1e+99, upper = NULL),
object$MLE$call.args$control$dist)))
n.new <- n
}
else {
d <- as.matrix(do.call(spam::nearest.dist, c(list(x = object$MLE$call.args$locs,
delta = 1e+99, upper = NULL), object$MLE$call.args$control$dist)))
d_cross <- as.matrix(do.call(spam::nearest.dist, c(list(x = newlocs,
y = object$MLE$call.args$locs, delta = 1e+99), object$MLE$call.args$control$dist)))
n.new <- nrow(newlocs)
}
if (is.null(newlocs)) {
newlocs <- object$MLE$call.args$locs
d <- d_cross <- as.matrix(do.call(spam::nearest.dist,
c(list(x = newlocs, delta = 1e+99, upper = NULL),
object$MLE$call.args$control$dist)))
n.new <- n
}
else {
d <- as.matrix(do.call(spam::nearest.dist, c(list(x = object$MLE$call.args$locs,
delta = 1e+99, upper = NULL), object$MLE$call.args$control$dist)))
d_cross <- as.matrix(do.call(spam::nearest.dist, c(list(x = newlocs,
y = object$MLE$call.args$locs, delta = 1e+99), object$MLE$call.args$control$dist)))
n.new <- nrow(newlocs)
}
is.null(newlocs)
d <- as.matrix(do.call(spam::nearest.dist, c(list(x = object$MLE$call.args$locs,
delta = 1e+99, upper = NULL), object$MLE$call.args$control$dist)))
spam::nearest.dist
d <- as.matrix(do.call(spam::nearest.dist, c(list(x = object$MLE$call.args$locs,
delta = 1e+99, upper = NULL), object$MLE$call.args$control$dist)))
d
d_cross <- as.matrix(do.call(spam::nearest.dist, c(list(x = newlocs,
y = object$MLE$call.args$locs, delta = 1e+99), object$MLE$call.args$control$dist)))
d_cross
n.new <- nrow(newlocs)
d <- as.matrix(do.call(spam::nearest.dist, c(list(x = object$MLE$call.args$locs,
delta = 1e+99, upper = NULL), object$MLE$call.args$control$dist)))
d_cross <- as.matrix(do.call(spam::nearest.dist, c(list(x = newlocs,
y = object$MLE$call.args$locs, delta = 1e+99), object$MLE$call.args$control$dist)))
n.new <- nrow(newlocs)
raw.cf <- MLE.cov.func(object$MLE$call.args$control$cov.name)
MLE.cov.func <- function(cov.name) {
if (is.character(cov.name)) {
cov.func <- switch(cov.name,
"exp" = spam::cov.exp,
"mat32" = function(h, theta) {
spam::cov.mat(h, theta = c(theta, 3/2))},
"mat52" = function(h, theta) {
spam::cov.mat(h, theta = c(theta, 5/2))},
"sph" = spam::cov.sph,
"wend1" = spam::cov.wend1,
"wend2" = spam::cov.wend2,
stop("Cov.name argument not defined."))
} else if (is.function(cov.name)) {
cov.func <- cov.name
} else {
stop("Cov.name argument neither character, nor covariance function.")
}
return(cov.func)
}
raw.cf <- MLE.cov.func(object$MLE$call.args$control$cov.name)
is.null(object$MLE$call.args$control$taper)
taper <- NULL
cf_cross <- function(x) raw.cf(d_cross, x)
cf <- function(x) raw.cf(d, x)
cov_y <- Sigma_y(x = cov.par, p = pW, cov_func = cf, outer.W = object$MLE$comp.args$outer.W,
taper = taper)
library(coefvary)
library(varycoef)
Sigma_y
cov_y <- varycoef::Sigma_y(x = cov.par, p = pW, cov_func = cf, outer.W = object$MLE$comp.args$outer.W,
taper = taper)
locs <- 1:6
# random effects covariates
W <- cbind(rep(1, 6), 5:10)
# distance matrix with and without tapering
d <- as.matrix(dist(locs))
# distance matrix with and without tapering
tap_dist <- 2
d_tap <- spam::nearest.dist(locs, delta = tap_dist)
# call without tapering
(Sy <- varycoef:::Sigma_y(
x = rep(0.5, 5),
cov_func = function(x) spam::cov.exp(d, x),
outer.W = lapply(1:ncol(W), function(k) W[, k] %o% W[, k])
))
str(Sy)
# locations
locs <- 1:6
# random effects covariates
W <- cbind(rep(1, 6), 5:10)
# distance matrix with and without tapering
d <- as.matrix(dist(locs))
# distance matrix with and without tapering
tap_dist <- 2
d_tap <- spam::nearest.dist(locs, delta = tap_dist)
# call without tapering
(Sy <- varycoef:::Sigma_y(
x = rep(0.5, 5),
cov_func = function(x) spam::cov.exp(d, x),
outer.W = lapply(1:ncol(W), function(k) W[, k] %o% W[, k])
))
cov_y <- Sigma_y(x = cov.par, p = pW, cov_func = cf, outer.W = object$MLE$comp.args$outer.W,
taper = taper)
cov_b_y <- Sigma_b_y(x = cov.par, cov.func = cf_cross, W = as.matrix(object$MLE$call.args$W),
n.new = n.new)
eff <- cov_b_y %*% solve(cov_y) %*% (object$MLE$call.args$y -
object$MLE$call.args$X %*% mu)
eff <- matrix(eff, ncol = pW)
!is.null(newX) & !is.null(newW)
newX = Null
newX = NULL
!is.null(newX) & !is.null(newW)
newW = NULL
!is.null(newX) & !is.null(newW)
Sigma_y
