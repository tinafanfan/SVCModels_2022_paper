data_space_mt = as.matrix(data_space_train)
data_attrb = data_attrb_train
g_train <- mrts(knot = data_space_mt, k = max(M_hat), x = data_space_mt) # NOTE: 用於surface estimation
X_train <- model.matrix(formula_modelmatrix, data_attrb)
dummyvar_data  <- set.dummy(y_name, X_train, data_attrb)[[1]]
Y_train <- data_attrb$price_unit
phi_train <- compute.datamatrix(dummyvar_data, M_hat, g_train)
model <- lm(Y_train ~ phi_train[,-1])
result = list(model = model,
M_hat = M_hat,
X_train = X_train,
Y_train = Y_train,
data_space_train = data_space_mt,
g_train = g_train,
formula_modelmatrix = formula_modelmatrix,
log_normal = FALSE)
# predict ----
prediction = predict.mrbs.svc(mrbs_svc_result = result,
data_attrb_test,
data_space_test,
log_normal = FALSE)
# predict ----
prediction = predict.mrbs.svc(mrbs_svc_result = result,
data_attrb_valid,
data_space_valid,
log_normal = FALSE)
RMSE(prediction$Y_hat, data_attrb_test$price_unit)
source("utils.R")
# prediction ----
predict.mrbs.svc <- function(mrbs_svc_result, data_attrb_test, data_space_test,
log_normal = FALSE){
M_hat <- mrbs_svc_result$M_hat
data_space_train <- as.matrix(mrbs_svc_result$data_space_train)
formula_modelmatrix <- mrbs_svc_result$formula_modelmatrix
model <- mrbs_svc_result$model
log_normal <- mrbs_svc_result$log_normal
coef_est <- model$coefficients
data_space_test <- as.matrix(data_space_test)
g_test  <- mrts(knot = data_space_train,
k = max(M_hat),
x = data_space_test)
X_test <- model.matrix(formula_modelmatrix, data_attrb_test)
phi_test <- compute.datamatrix(X_test, M_hat, g_test)
Y_hat <-  as.numeric(phi_test %*% coef_est)
# res <- RMSE(Y_hat, data_attrb_test[,paste(model$terms[[2]])])
output <- list(X_test = X_test,
data_space_test = data_space_test,
g_test = g_test,
log_normal = log_normal,
Y_hat = Y_hat)
if(log_normal == TRUE){
r = lognormal.pred(model, data_matrix = phi_test)
Z_hat <- r$pred_logscale
Y_hat <- r$pred_original
output <- list(X_test = X_test,
Y_test = Y_test,
data_space_test = data_space_test,
g_test = g_test,
log_normal = log_normal,
Y_hat = hat,
Z_hat = Z_hat)
}
return(output)
}
# predict ----
prediction = predict.mrbs.svc(mrbs_svc_result = result,
data_attrb_valid,
data_space_valid,
log_normal = FALSE)
RMSE(prediction$Y_hat, data_attrb_test$price_unit)
RMSE(prediction$Y_hat, data_attrb_valid$price_unit)
rm(list=ls())
folder_path = "/Users/tina/Documents/3_Research/201810_GWR/github-folder-name"
setwd(folder_path)
source("datasets.R")
source("utils.R")
source("models.R")
source("evaluation.R")
data <- load_data(folder_path)
# data_sep_fold <- data_separation_all(data, seed = 10, fold = 10)
#
# data_attrb_test <- data_sep_fold[[2]]$validation@data
# data_space_test <- data_sep_fold[[2]]$validation@coords
set.seed(10)
number.data  <- nrow(data)*2/3
number.test <- nrow(data)*1/3
I <- sample(1:nrow(data), number.data)
# training data
data_attrb_train <- data[I, c(1,2,3,4)]
data_space_train <- data[I, c(5,6)]
# test data
data_attrb_valid  <- data[-I, c(1,2,3,4)]
data_space_valid <- data[-I, c(5,6)]
# M_hat = c(22,9,9,79)
# M_hat = c(48,9,20,98)
# M_hat = c(174,132,189,154)
M_hat = c(181,9,94,6)
# parameters setting ----
formula = price_unit ~ build_area + age + floor_th
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
formula_modelmatrix = as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
data_space_mt = as.matrix(data_space_train)
data_attrb = data_attrb_train
g_train <- mrts(knot = data_space_mt, k = max(M_hat), x = data_space_mt) # NOTE: 用於surface estimation
X_train <- model.matrix(formula_modelmatrix, data_attrb)
dummyvar_data  <- set.dummy(y_name, X_train, data_attrb)[[1]]
Y_train <- data_attrb$price_unit
phi_train <- compute.datamatrix(dummyvar_data, M_hat, g_train)
model <- lm(Y_train ~ phi_train[,-1])
result = list(model = model,
M_hat = M_hat,
X_train = X_train,
Y_train = Y_train,
data_space_train = data_space_mt,
g_train = g_train,
formula_modelmatrix = formula_modelmatrix,
log_normal = FALSE)
# predict ----
prediction = predict.mrbs.svc(mrbs_svc_result = result,
data_attrb_valid,
data_space_valid,
log_normal = FALSE)
system.time({
RMSE(prediction$Y_hat, data_attrb_valid$price_unit)
})
RMSE(prediction$Y_hat, data_attrb_valid$price_unit)
system.time({model <- lm(Y_train ~ phi_train[,-1]) })
system.time({model2 <- lm.fit(y = Y_train, x = phi_train[,-1]) })
system.time({model <- lm(Y_train ~ phi_train[,-1]) })
system.time({model2 <- lm.fit(y = Y_train, x = phi_train[,-1]) })
system.time({model3 <- RcppEigen::fastLm(y = Y_train, x = phi_train[,-1]) })
system.time({model4 <- RcppArmadillo::fastLm(y = Y_train, x = phi_train[,-1]) })
system.time({model3 <- RcppEigen::fastLm(y = Y_train, X = phi_train[,-1]) })
system.time({model4 <- RcppArmadillo::fastLm(y = Y_train, X = phi_train[,-1]) })
system.time({model <- lm(Y_train ~ phi_train[,-1]) })
system.time({model2 <- lm.fit(y = Y_train, x = phi_train[,-1]) })
system.time({model3 <- RcppEigen::fastLm(y = Y_train, X = phi_train[,-1]) })
system.time({model4 <- RcppArmadillo::fastLm(y = Y_train, X = phi_train[,-1]) })
dim(phi_train[,-1])
M_hat = c(174,132,189,154)
# M_hat = c(181,9,94,6)
# parameters setting ----
formula = price_unit ~ build_area + age + floor_th
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
formula_modelmatrix = as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
data_space_mt = as.matrix(data_space_train)
data_attrb = data_attrb_train
g_train <- mrts(knot = data_space_mt, k = max(M_hat), x = data_space_mt) # NOTE: 用於surface estimation
X_train <- model.matrix(formula_modelmatrix, data_attrb)
dummyvar_data  <- set.dummy(y_name, X_train, data_attrb)[[1]]
Y_train <- data_attrb$price_unit
phi_train <- compute.datamatrix(dummyvar_data, M_hat, g_train)
system.time({model <- lm(Y_train ~ phi_train[,-1]) })
system.time({model2 <- lm.fit(y = Y_train, x = phi_train[,-1]) })
system.time({model3 <- RcppEigen::fastLm(y = Y_train, X = phi_train[,-1]) })
system.time({model4 <- RcppArmadillo::fastLm(y = Y_train, X = phi_train[,-1]) })
dim(phi_train[,-1])
system.time({model1 <- lm(Y_train ~ phi_train[,-1]) })
model1$coefficients - model2$coefficients
sum(model1$coefficients - model2$coefficients)
length(model1$coefficients)
length(model2$coefficients)
length(model3$coefficients)
length(model4$coefficients)
system.time({model1 <- lm(Y_train ~ phi_train[,-1]-1) })
system.time({model2 <- lm.fit(y = Y_train, x = phi_train[,-1]) })
system.time({model3 <- RcppEigen::fastLm(y = Y_train, X = phi_train[,-1]) })
system.time({model4 <- RcppArmadillo::fastLm(y = Y_train, X = phi_train[,-1]) })
sum(model1$coefficients - model2$coefficients)
sum(model1$coefficients - model3$coefficients)
sum(model1$coefficients - model4$coefficients)
pred1 <- predict(model1, phi_train[,-1])
pred1 <- predict(model1, as.data.frame(phi_train[,-1]))
pred3 <- phi_train[,-1] %*% model3$coefficients
sum(pred1 - pred3)
rm(list=ls())
folder_path = "/Users/tina/Documents/3_Research/201810_GWR/github-folder-name"
setwd(folder_path)
source("datasets.R")
source("utils.R")
source("models.R")
source("evaluation.R")
predict.mrbs.svc.simple <- function(M_hat,
formula,
data_attrb_train,
data_space_train,
data_attrb_valid,
data_space_valid){
# parameters setting ----
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data_attrb) == y_name)
Y_train <- data_attrb[,y_ind]
formula_modelmatrix = as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
data_space_mt = as.matrix(data_space_train)
data_attrb = data_attrb_train
g_train <- mrts(knot = data_space_mt, k = max(M_hat), x = data_space_mt) # NOTE: 用於surface estimation
X_train <- model.matrix(formula_modelmatrix, data_attrb)
# dummyvar_data  <- set.dummy(y_name, X_train, data_attrb)[[1]]
dummyvar_data <- X_train
phi_train <- compute.datamatrix(dummyvar_data, M_hat, g_train)
# model <- lm(Y_train ~ phi_train[,-1])
model <- RcppEigen::fastLm(X = phi_train, y = Y_train)
result = list(model = model,
M_hat = M_hat,
X_train = X_train,
Y_train = Y_train,
data_space_train = data_space_mt,
g_train = g_train,
formula_modelmatrix = formula_modelmatrix,
log_normal = FALSE)
# predict ----
prediction = predict.mrbs.svc(mrbs_svc_result = result,
data_attrb_valid,
data_space_valid,
log_normal = FALSE)
return(prediction)
}
data <- load_data(folder_path)
set.seed(10)
number.data  <- nrow(data)*2/3
number.test <- nrow(data)*1/3
I <- sample(1:nrow(data), number.data)
# training data
data_attrb_train <- data[I, c(1,2,3,4)]
data_space_train <- data[I, c(5,6)]
# test data
data_attrb_valid  <- data[-I, c(1,2,3,4)]
data_space_valid <- data[-I, c(5,6)]
predict.mrbs.svc.simple(M_hat = c(174, 132, 189, 154),
formula = price_unit ~ build_area + age + floor_th,
data_attrb_train = data_attrb_train,
data_space_train = data_space_train,
data_attrb_valid = data_attrb_valid,
data_space_valid = data_attrb_valid)
RMSE(prediction$Y_hat, data_attrb_valid$price_unit)
rm(list=ls())
folder_path = "/Users/tina/Documents/3_Research/201810_GWR/github-folder-name"
setwd(folder_path)
source("datasets.R")
source("utils.R")
source("models.R")
source("evaluation.R")
predict.mrbs.svc.simple <- function(M_hat,
formula,
data_attrb_train,
data_space_train,
data_attrb_valid,
data_space_valid){
# parameters setting ----
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data_attrb_train) == y_name)
Y_train <- data_attrb_train[,y_ind]
formula_modelmatrix = as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
data_space_mt = as.matrix(data_space_train)
g_train <- mrts(knot = data_space_mt, k = max(M_hat), x = data_space_mt) # NOTE: 用於surface estimation
X_train <- model.matrix(formula_modelmatrix, data_attrb_train)
# dummyvar_data  <- set.dummy(y_name, X_train, data_attrb_train)[[1]]
dummyvar_data <- X_train
phi_train <- compute.datamatrix(dummyvar_data, M_hat, g_train)
# model <- lm(Y_train ~ phi_train[,-1])
model <- RcppEigen::fastLm(X = phi_train, y = Y_train)
result = list(model = model,
M_hat = M_hat,
X_train = X_train,
Y_train = Y_train,
data_space_train = data_space_mt,
g_train = g_train,
formula_modelmatrix = formula_modelmatrix,
log_normal = FALSE)
# predict ----
prediction = predict.mrbs.svc(mrbs_svc_result = result,
data_attrb_valid,
data_space_valid,
log_normal = FALSE)
return(prediction)
}
data <- load_data(folder_path)
set.seed(10)
number.data  <- nrow(data)*2/3
number.test <- nrow(data)*1/3
I <- sample(1:nrow(data), number.data)
# training data
data_attrb_train <- data[I, c(1,2,3,4)]
data_space_train <- data[I, c(5,6)]
# test data
data_attrb_valid  <- data[-I, c(1,2,3,4)]
data_space_valid <- data[-I, c(5,6)]
predict.mrbs.svc.simple(M_hat = c(174, 132, 189, 154),
formula = price_unit ~ build_area + age + floor_th,
data_attrb_train = data_attrb_train,
data_space_train = data_space_train,
data_attrb_valid = data_attrb_valid,
data_space_valid = data_attrb_valid)
RMSE(prediction$Y_hat, data_attrb_valid$price_unit)
rm(list=ls())
folder_path = "/Users/tina/Documents/3_Research/201810_GWR/github-folder-name"
setwd(folder_path)
source("datasets.R")
source("utils.R")
source("models.R")
source("evaluation.R")
predict.mrbs.svc.simple <- function(M_hat,
formula,
data_attrb_train,
data_space_train,
data_attrb_valid,
data_space_valid){
# parameters setting ----
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data_attrb_train) == y_name)
Y_train <- data_attrb_train[,y_ind]
formula_modelmatrix = as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
data_space_mt = as.matrix(data_space_train)
g_train <- mrts(knot = data_space_mt, k = max(M_hat), x = data_space_mt) # NOTE: 用於surface estimation
X_train <- model.matrix(formula_modelmatrix, data_attrb_train)
# dummyvar_data  <- set.dummy(y_name, X_train, data_attrb_train)[[1]]
dummyvar_data <- X_train
phi_train <- compute.datamatrix(dummyvar_data, M_hat, g_train)
# model <- lm(Y_train ~ phi_train[,-1])
model <- RcppEigen::fastLm(X = phi_train, y = Y_train)
result = list(model = model,
M_hat = M_hat,
X_train = X_train,
Y_train = Y_train,
data_space_train = data_space_mt,
g_train = g_train,
formula_modelmatrix = formula_modelmatrix,
log_normal = FALSE)
# predict ----
prediction = predict.mrbs.svc(mrbs_svc_result = result,
data_attrb_valid,
data_space_valid,
log_normal = FALSE)
return(prediction)
}
data <- load_data(folder_path)
set.seed(10)
number.data  <- nrow(data)*2/3
number.test <- nrow(data)*1/3
I <- sample(1:nrow(data), number.data)
# training data
data_attrb_train <- data[I, c(1,2,3,4)]
data_space_train <- data[I, c(5,6)]
# test data
data_attrb_valid  <- data[-I, c(1,2,3,4)]
data_space_valid <- data[-I, c(5,6)]
prediction <- predict.mrbs.svc.simple(M_hat = c(174, 132, 189, 154),
formula = price_unit ~ build_area + age + floor_th,
data_attrb_train = data_attrb_train,
data_space_train = data_space_train,
data_attrb_valid = data_attrb_valid,
data_space_valid = data_attrb_valid)
RMSE(prediction$Y_hat, data_attrb_valid$price_unit)
M_hat = c(174, 132, 189, 154)
formula = price_unit ~ build_area + age + floor_th
data_attrb_train = data_attrb_train
data_space_train = data_space_train
data_attrb_valid = data_attrb_valid
data_space_valid = data_attrb_valid
# parameters setting ----
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data_attrb_train) == y_name)
Y_train <- data_attrb_train[,y_ind]
formula_modelmatrix = as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
data_space_mt = as.matrix(data_space_train)
g_train <- mrts(knot = data_space_mt, k = max(M_hat), x = data_space_mt) # NOTE: 用於surface estimation
X_train <- model.matrix(formula_modelmatrix, data_attrb_train)
# dummyvar_data  <- set.dummy(y_name, X_train, data_attrb_train)[[1]]
dummyvar_data <- X_train
phi_train <- compute.datamatrix(dummyvar_data, M_hat, g_train)
# model <- lm(Y_train ~ phi_train[,-1])
model <- RcppEigen::fastLm(X = phi_train, y = Y_train)
result = list(model = model,
M_hat = M_hat,
X_train = X_train,
Y_train = Y_train,
data_space_train = data_space_mt,
g_train = g_train,
formula_modelmatrix = formula_modelmatrix,
log_normal = FALSE)
# predict ----
prediction = predict.mrbs.svc(mrbs_svc_result = result,
data_attrb_valid,
data_space_valid,
log_normal = FALSE)
RMSE(prediction$Y_hat, data_attrb_valid$price_unit)
model <- lm(Y_train ~ phi_train[,-1])
result = list(model = model,
M_hat = M_hat,
X_train = X_train,
Y_train = Y_train,
data_space_train = data_space_mt,
g_train = g_train,
formula_modelmatrix = formula_modelmatrix,
log_normal = FALSE)
# predict ----
prediction = predict.mrbs.svc(mrbs_svc_result = result,
data_attrb_valid,
data_space_valid,
log_normal = FALSE)
RMSE(prediction$Y_hat, data_attrb_valid$price_unit)
data.train = data_attrb_train
space.train = data_space_train
data.test = data_attrb_valid
space.test = data_attrb_valid
## prepare data(need run PART1, but don't need PART2) ##
formula = price_unit ~ build_area + age + floor_th
M.up = 200
space.train_mt <- as.matrix(space.train)
g.train <- autoFRK::mrts(knot = space.train_mt, k = M.up, x = space.train_mt) # NOTE: 用於surface estimation
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data.train) == y_name)
Y.train <- data.train[,y_ind]
formula.modelmatrix <- as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
X.train <- model.matrix(formula.modelmatrix, data.train)
dummyvar.train <- set.dummy(y_name, X.train, data.train)[[1]] # source(file = "source_set_dummy.R") # dummyvar
dummyvar_index <- set.dummy(y_name, X.train, data.train)[[2]] # NOTE: 用於 function中判斷是否為類別變數的依據
p. <- ncol(dummyvar.train) # p_X <- ncol(X) # 原本X有幾個變數(並非看dummy)
M_hat = c(174, 132, 189, 154)
# M.hat <- c(181, 9, 94, 6) # square ini:1
# M.hat <- c(186, 19, 94, 6) # square ini:300
# M.hat <- c(92,10,36,186) # ini:300
# M.hat <- c(188,22,85,4) # ini:1
# M.hat <- c(91, 10,37,188) # ini:150
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model <- lm(Y.train ~ phi.train[,-1])
coef.est <- model$coefficients
Y.hat.train <- as.numeric(phi.train %*% coef.est)
sig.hat <- summary(model)$sigma
## Test model ##
space.test_mt <- as.matrix(space.test)
g.test  <- mrts(knot = space.train_mt, k = max(M.hat), x = space.test_mt) # NOTE: 用於surface estimation
formula.modelmatrix <- as.formula(paste0("~ 1 + build_area + age + floor_th"))
X.test <- model.matrix(formula.modelmatrix, data.test)
Y.test <- data.test$price_unit
phi.test <- compute.datamatrix(X.test, M.hat, g.test)
Y.hat.test <-  as.numeric(phi.test %*% coef.est)
M.hat = c(174, 132, 189, 154)
# M.hat <- c(181, 9, 94, 6) # square ini:1
# M.hat <- c(186, 19, 94, 6) # square ini:300
# M.hat <- c(92,10,36,186) # ini:300
# M.hat <- c(188,22,85,4) # ini:1
# M.hat <- c(91, 10,37,188) # ini:150
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model <- lm(Y.train ~ phi.train[,-1])
coef.est <- model$coefficients
Y.hat.train <- as.numeric(phi.train %*% coef.est)
sig.hat <- summary(model)$sigma
## Test model ##
space.test_mt <- as.matrix(space.test)
g.test  <- mrts(knot = space.train_mt, k = max(M.hat), x = space.test_mt) # NOTE: 用於surface estimation
formula.modelmatrix <- as.formula(paste0("~ 1 + build_area + age + floor_th"))
X.test <- model.matrix(formula.modelmatrix, data.test)
Y.test <- data.test$price_unit
phi.test <- compute.datamatrix(X.test, M.hat, g.test)
Y.hat.test <-  as.numeric(phi.test %*% coef.est)
RMSE(Y.hat.test, data_attrb_valid$price_unit)
prediction <- predict.mrbs.svc.simple(M_hat = c(181, 9, 94, 6),
formula = price_unit ~ build_area + age + floor_th,
data_attrb_train = data_attrb_train,
data_space_train = data_space_train,
data_attrb_valid = data_attrb_valid,
data_space_valid = data_attrb_valid)
RMSE(prediction$Y_hat, data_attrb_valid$price_unit)
data_attrb_train[1,]
data_space_train[1,]
data_attrb_valid[1,]
dim(data_attrb_valid)
dim(data_attrb_train)
## prepare data(need run PART1, but don't need PART2) ##
formula = price_unit ~ build_area + age + floor_th
criterion_setting = "bic"
M.up = 200
space.train_mt <- as.matrix(space.train)
g.train <- autoFRK::mrts(knot = space.train_mt, k = M.up, x = space.train_mt) # NOTE: 用於surface estimation
formula <- as.formula(formula)
y_name <- all.vars(formula)[1]
y_ind <- which(colnames(data.train) == y_name)
Y.train <- data.train[,y_ind]
formula.modelmatrix <- as.formula(paste0("~ 1 + ", substr(paste(formula,collapse=" "), start = nchar(y_name) + 4, stop = nchar(paste(formula,collapse=" ")))))
X.train <- model.matrix(formula.modelmatrix, data.train)
dummyvar.train <- set.dummy(y_name, X.train, data.train)[[1]] # source(file = "source_set_dummy.R") # dummyvar
dummyvar_index <- set.dummy(y_name, X.train, data.train)[[2]] # NOTE: 用於 function中判斷是否為類別變數的依據
p. <- ncol(dummyvar.train) # p_X <- ncol(X) # 原本X有幾個變數(並非看dummy)
## Train model ##
M.hat =c(181, 9, 94, 6)
# M.hat <- c(181, 9, 94, 6) # square ini:1
# M.hat <- c(186, 19, 94, 6) # square ini:300
# M.hat <- c(92,10,36,186) # ini:300
# M.hat <- c(188,22,85,4) # ini:1
# M.hat <- c(91, 10,37,188) # ini:150
phi.train <- compute.datamatrix(dummyvar.train, M.hat, g.train)
model <- lm(Y.train ~ phi.train[,-1])
coef.est <- model$coefficients
Y.hat.train <- as.numeric(phi.train %*% coef.est)
sig.hat <- summary(model)$sigma
## Test model ##
space.test_mt <- as.matrix(space.test)
g.test  <- mrts(knot = space.train_mt, k = max(M.hat), x = space.test_mt) # NOTE: 用於surface estimation
formula.modelmatrix <- as.formula(paste0("~ 1 + build_area + age + floor_th"))
X.test <- model.matrix(formula.modelmatrix, data.test)
Y.test <- data.test$price_unit
phi.test <- compute.datamatrix(X.test, M.hat, g.test)
Y.hat.test <-  as.numeric(phi.test %*% coef.est)
RMSE(Y.hat.test, data_attrb_valid$price_unit)
