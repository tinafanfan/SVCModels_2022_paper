beta2_bs <- bs[,1:k3] %*% matrix(alpha_selected[(k1+k2+1):(k1+k2+k3)],k3,1)
## loss of coefficient (RMSE)
RMSE_0_bs_vt <- sqrt(mean((beta0_bs - data_dgp$beta_0)^2))
RMSE_1_bs_vt <- sqrt(mean((beta1_bs - data_dgp$beta_1)^2))
RMSE_2_bs_vt <- sqrt(mean((beta2_bs - data_dgp$beta_2)^2))
# output ----
return(c(RMSE_0_gwr, RMSE_1_gwr, RMSE_2_gwr,
RMSE_0_bs, RMSE_1_bs, RMSE_2_bs))
}
save.image(file = "function-sim_design_1_RMSE_multiscale.RData")
# 3-1 load function ----
rm(list=ls())
setwd("~/Documents/3_Research/201810_GWR/script/2_simulation_mgwrpaper")
# load(file = "function-sim_design_1_RMSE.RData")
load(file = "function-sim_design_1_RMSE_multiscale.RData")
ptm <- proc.time()
m <- 2
RMSE_mt <- replicate(m, sim_design_1_RMSE())
proc.time() - ptm
RMSE_df <- t(RMSE_mt)
colnames(RMSE_df) <- c("gwr 0", "gwr 1", "gwr 2", "bs 0", "bs 1", "bs 2")
# setwd("~/Documents/3_Research/201810_GWR/R output/2_simulation_paper")
# png(file = "RMSE.png",
# height = 6, width = 6, units = 'in', res = 300)
# plot.new()
boxplot(RMSE_df, ylim = c(0, max(RMSE_df)), las=1, ylab = "RMSE")
box()
sim_design_1_RMSE <- function(){
rm(list=ls())
# 1-1 set coefficient: beta 1 and beta 2 (beta 0 is const.) ----
## generation
x <- seq(0,24)
y <- seq(0,24)
beta_1 <- matrix(NA, length(x), length(y))
beta_2 <- matrix(NA, length(x), length(y))
for(i in 1:length(x)){
for(j in 1:length(y)){
beta_1[i,j] <- 1 + (1/12) * (x[i] + y[j])
beta_2[i,j] <- 1 + (1/324)*(36-(6-x[i]/2)^2)*(36-(6-y[j]/2)^2)
}
}
# 1-2 data generating process ----
## independent variables: x1 and x2
x1 <- matrix(rnorm(625, 0, 1), 25, 25)
x2 <- matrix(rnorm(625, 0, 1), 25, 25)
## error term
error <- matrix(rnorm(625, 0, 0.5^2), 25, 25)
## dependent varible: y
var_y <- 3 + x1*beta_1 + x2*beta_2 + error
# 1-3 combine data ----
data_dgp <- data.frame(var_x1 = c(x1),
var_x2 = c(x2),
var_y  = c(var_y),
coord_x = rep(0:24, each=25),
coord_y = rep(0:24, times=25),
beta_1 = c(beta_1),
beta_2 = c(beta_2),
beta_0 = 3)
# 2-1 mgwr ----
coordinates(data_dgp) <- c("coord_x","coord_y") # SpatialPointsDataFrame-class
class(data_dgp)
GWR_model_multi <- gwr.multiscale(var_y ~ var_x1 + var_x2, data = data_dgp,
bws0 = c(0,0,0),
kernel = "bisquare",
hatmatrix = T)
## coefficient estimation
data_dgp$beta0_gwr <- GWR_model_multi$SDF$Intercept
data_dgp$beta1_gwr <- GWR_model_multi$SDF$var_x1
data_dgp$beta2_gwr <- GWR_model_multi$SDF$var_x2
## loss of coefficient (RMSE)
RMSE_0_gwr <- sqrt(mean((data_dgp$beta0_gwr - data_dgp$beta_0)^2))
RMSE_1_gwr <- sqrt(mean((data_dgp$beta1_gwr - data_dgp$beta_1)^2))
RMSE_2_gwr <- sqrt(mean((data_dgp$beta2_gwr - data_dgp$beta_2)^2))
# 2-2 bs ----
## prepare for knots (need to be in range [0,1])
xx <- seq(0,24,length.out=25)
yy <- seq(0,24,length.out=25)
xy <- matrix(NA, nrow = length(xx)*length(yy),ncol=2)
for(ii in 1:length(xx)){
for(jj in 1:length(yy)){
xy[(ii - 1)*25 + (jj),] <- c(xx[ii],yy[jj])
}
}
## model
k=50
bs <- mrts(knot = xy, k = k)
#
beta0_bs <- matrix(NA, nrow(bs), k)
beta1_bs <- matrix(NA, nrow(bs), k)
beta2_bs <- matrix(NA, nrow(bs), k)
#
AIC_bs_vt <- c()
# loss of coefficient (RMSE)
RMSE_0_bs_vt <- c()
RMSE_1_bs_vt <- c()
RMSE_2_bs_vt <- c()
for(i in 1:k){
var_star <- cbind(bs[,1:i],
bs[,1:i]*data_dgp$var_x1,
bs[,1:i]*data_dgp$var_x2)
BS_model <- lm(data_dgp$var_y ~ var_star - 1)
alpha_selected <- BS_model$coefficients
## AIC
AIC_bs_vt[i] <- AIC(BS_model)
## coefficient estimation
beta0_bs[,i] <- bs[,1:i] %*% matrix(alpha_selected[1:i],i,1)
beta1_bs[,i] <- bs[,1:i] %*% matrix(alpha_selected[(i+1):(2*i)],i,1)
beta2_bs[,i] <- bs[,1:i] %*% matrix(alpha_selected[(2*i+1):(3*i)],i,1)
## loss of coefficient (RMSE)
RMSE_0_bs_vt[i] <- sqrt(mean((beta0_bs[,i] - data_dgp$beta_0)^2))
RMSE_1_bs_vt[i] <- sqrt(mean((beta1_bs[,i] - data_dgp$beta_1)^2))
RMSE_2_bs_vt[i] <- sqrt(mean((beta2_bs[,i] - data_dgp$beta_2)^2))
}
## choose k
k_min <- which.min(AIC_bs_vt)
# 2-2 mbs ----
# multiscale parameter space (stepwise)
k_min_vt <- c(k_min, k_min, k_min)
function_k_candidate <- function(k_min_vt){
a <- k_min_vt[1]
b <- k_min_vt[2]
c <- k_min_vt[3]
result <- matrix(c(a, b, c,
a+1, b, c,
a, b+1, c,
a, b, c+1,
a-1, b, c,
a, b-1, c,
a, b, c-1), 7, 3, byrow = T)
return(result)
}
index <- 0
while(index != 1){
k_candidate <- function_k_candidate(k_min_vt)
AIC_bs_vt <- c()
for(i in 1:nrow(k_candidate)){
var_star <- cbind(bs[,1:k_candidate[i,1]],
bs[,1:k_candidate[i,2]]*data_dgp$var_x1,
bs[,1:k_candidate[i,3]]*data_dgp$var_x2)
BS_model <- lm(data_dgp$var_y ~ var_star - 1)
alpha_selected <- BS_model$coefficients
## AIC
AIC_bs_vt[i] <- AIC(BS_model)
}
k_min_vt <- k_candidate[which.min(AIC_bs_vt),]
index <- which.min(AIC_bs_vt)
}
k1 <- k_min_vt[1]
k2 <- k_min_vt[2]
k3 <- k_min_vt[3]
var_star <- cbind(bs[,1:k1],
bs[,1:k2]*data_dgp$var_x1,
bs[,1:k3]*data_dgp$var_x2)
BS_model <- lm(data_dgp$var_y ~ var_star - 1)
alpha_selected <- BS_model$coefficients
## coefficient estimation
beta0_bs <- bs[,1:k1] %*% matrix(alpha_selected[1:k1],k1,1)
beta1_bs <- bs[,1:k2] %*% matrix(alpha_selected[(k1+1):(k1+k2)],k2,1)
beta2_bs <- bs[,1:k3] %*% matrix(alpha_selected[(k1+k2+1):(k1+k2+k3)],k3,1)
## loss of coefficient (RMSE)
RMSE_0_bs_vt <- sqrt(mean((beta0_bs - data_dgp$beta_0)^2))
RMSE_1_bs_vt <- sqrt(mean((beta1_bs - data_dgp$beta_1)^2))
RMSE_2_bs_vt <- sqrt(mean((beta2_bs - data_dgp$beta_2)^2))
# output ----
return(c(RMSE_0_gwr, RMSE_1_gwr, RMSE_2_gwr,
RMSE_0_bs, RMSE_1_bs, RMSE_2_bs))
}
save.image(file = "function-sim_design_1_RMSE_multiscale.RData")
rm(list=ls())
setwd("~/Documents/3_Research/201810_GWR/script/2_simulation_mgwrpaper")
# load(file = "function-sim_design_1_RMSE.RData")
load(file = "function-sim_design_1_RMSE_multiscale.RData")
ptm <- proc.time()
m <- 2
RMSE_mt <- replicate(m, sim_design_1_RMSE())
proc.time() - ptm
RMSE_df <- t(RMSE_mt)
colnames(RMSE_df) <- c("gwr 0", "gwr 1", "gwr 2", "bs 0", "bs 1", "bs 2")
# setwd("~/Documents/3_Research/201810_GWR/R output/2_simulation_paper")
# png(file = "RMSE.png",
# height = 6, width = 6, units = 'in', res = 300)
# plot.new()
boxplot(RMSE_df, ylim = c(0, max(RMSE_df)), las=1, ylab = "RMSE")
box()
# dev.off()
sim_design_1_RMSE <- function(){
rm(list=ls())
# 1-1 set coefficient: beta 1 and beta 2 (beta 0 is const.) ----
## generation
x <- seq(0,24)
y <- seq(0,24)
beta_1 <- matrix(NA, length(x), length(y))
beta_2 <- matrix(NA, length(x), length(y))
for(i in 1:length(x)){
for(j in 1:length(y)){
beta_1[i,j] <- 1 + (1/12) * (x[i] + y[j])
beta_2[i,j] <- 1 + (1/324)*(36-(6-x[i]/2)^2)*(36-(6-y[j]/2)^2)
}
}
# 1-2 data generating process ----
## independent variables: x1 and x2
x1 <- matrix(rnorm(625, 0, 1), 25, 25)
x2 <- matrix(rnorm(625, 0, 1), 25, 25)
## error term
error <- matrix(rnorm(625, 0, 0.5^2), 25, 25)
## dependent varible: y
var_y <- 3 + x1*beta_1 + x2*beta_2 + error
# 1-3 combine data ----
data_dgp <- data.frame(var_x1 = c(x1),
var_x2 = c(x2),
var_y  = c(var_y),
coord_x = rep(0:24, each=25),
coord_y = rep(0:24, times=25),
beta_1 = c(beta_1),
beta_2 = c(beta_2),
beta_0 = 3)
# 2-1 mgwr ----
coordinates(data_dgp) <- c("coord_x","coord_y") # SpatialPointsDataFrame-class
class(data_dgp)
GWR_model_multi <- gwr.multiscale(var_y ~ var_x1 + var_x2, data = data_dgp,
bws0 = c(0,0,0),
kernel = "bisquare",
hatmatrix = T)
## coefficient estimation
data_dgp$beta0_gwr <- GWR_model_multi$SDF$Intercept
data_dgp$beta1_gwr <- GWR_model_multi$SDF$var_x1
data_dgp$beta2_gwr <- GWR_model_multi$SDF$var_x2
## loss of coefficient (RMSE)
RMSE_0_gwr <- sqrt(mean((data_dgp$beta0_gwr - data_dgp$beta_0)^2))
RMSE_1_gwr <- sqrt(mean((data_dgp$beta1_gwr - data_dgp$beta_1)^2))
RMSE_2_gwr <- sqrt(mean((data_dgp$beta2_gwr - data_dgp$beta_2)^2))
# 2-2 bs ----
## prepare for knots (need to be in range [0,1])
xx <- seq(0,24,length.out=25)
yy <- seq(0,24,length.out=25)
xy <- matrix(NA, nrow = length(xx)*length(yy),ncol=2)
for(ii in 1:length(xx)){
for(jj in 1:length(yy)){
xy[(ii - 1)*25 + (jj),] <- c(xx[ii],yy[jj])
}
}
## model
k=50
bs <- mrts(knot = xy, k = k)
#
beta0_bs <- matrix(NA, nrow(bs), k)
beta1_bs <- matrix(NA, nrow(bs), k)
beta2_bs <- matrix(NA, nrow(bs), k)
#
AIC_bs_vt <- c()
# loss of coefficient (RMSE)
RMSE_0_bs_vt <- c()
RMSE_1_bs_vt <- c()
RMSE_2_bs_vt <- c()
for(i in 1:k){
var_star <- cbind(bs[,1:i],
bs[,1:i]*data_dgp$var_x1,
bs[,1:i]*data_dgp$var_x2)
BS_model <- lm(data_dgp$var_y ~ var_star - 1)
alpha_selected <- BS_model$coefficients
## AIC
AIC_bs_vt[i] <- AIC(BS_model)
## coefficient estimation
beta0_bs[,i] <- bs[,1:i] %*% matrix(alpha_selected[1:i],i,1)
beta1_bs[,i] <- bs[,1:i] %*% matrix(alpha_selected[(i+1):(2*i)],i,1)
beta2_bs[,i] <- bs[,1:i] %*% matrix(alpha_selected[(2*i+1):(3*i)],i,1)
## loss of coefficient (RMSE)
RMSE_0_bs_vt[i] <- sqrt(mean((beta0_bs[,i] - data_dgp$beta_0)^2))
RMSE_1_bs_vt[i] <- sqrt(mean((beta1_bs[,i] - data_dgp$beta_1)^2))
RMSE_2_bs_vt[i] <- sqrt(mean((beta2_bs[,i] - data_dgp$beta_2)^2))
}
## choose k
k_min <- which.min(AIC_bs_vt)
# 2-2 mbs ----
# multiscale parameter space (stepwise)
k_min_vt <- c(k_min, k_min, k_min)
function_k_candidate <- function(k_min_vt){
a <- k_min_vt[1]
b <- k_min_vt[2]
c <- k_min_vt[3]
result <- matrix(c(a, b, c,
a+1, b, c,
a, b+1, c,
a, b, c+1,
a-1, b, c,
a, b-1, c,
a, b, c-1), 7, 3, byrow = T)
return(result)
}
index <- 0
while(index != 1){
k_candidate <- function_k_candidate(k_min_vt)
AIC_bs_vt <- c()
for(i in 1:nrow(k_candidate)){
var_star <- cbind(bs[,1:k_candidate[i,1]],
bs[,1:k_candidate[i,2]]*data_dgp$var_x1,
bs[,1:k_candidate[i,3]]*data_dgp$var_x2)
BS_model <- lm(data_dgp$var_y ~ var_star - 1)
alpha_selected <- BS_model$coefficients
## AIC
AIC_bs_vt[i] <- AIC(BS_model)
}
k_min_vt <- k_candidate[which.min(AIC_bs_vt),]
index <- which.min(AIC_bs_vt)
}
k1 <- k_min_vt[1]
k2 <- k_min_vt[2]
k3 <- k_min_vt[3]
var_star <- cbind(bs[,1:k1],
bs[,1:k2]*data_dgp$var_x1,
bs[,1:k3]*data_dgp$var_x2)
BS_model <- lm(data_dgp$var_y ~ var_star - 1)
alpha_selected <- BS_model$coefficients
## coefficient estimation
beta0_bs <- bs[,1:k1] %*% matrix(alpha_selected[1:k1],k1,1)
beta1_bs <- bs[,1:k2] %*% matrix(alpha_selected[(k1+1):(k1+k2)],k2,1)
beta2_bs <- bs[,1:k3] %*% matrix(alpha_selected[(k1+k2+1):(k1+k2+k3)],k3,1)
## loss of coefficient (RMSE)
RMSE_0_bs <- sqrt(mean((beta0_bs - data_dgp$beta_0)^2))
RMSE_1_bs <- sqrt(mean((beta1_bs - data_dgp$beta_1)^2))
RMSE_2_bs <- sqrt(mean((beta2_bs - data_dgp$beta_2)^2))
# output ----
return(c(RMSE_0_gwr, RMSE_1_gwr, RMSE_2_gwr,
RMSE_0_bs, RMSE_1_bs, RMSE_2_bs))
}
save.image(file = "function-sim_design_1_RMSE_multiscale.RData")
sim_design_1_RMSE <- function(){
rm(list=ls())
# 1-1 set coefficient: beta 1 and beta 2 (beta 0 is const.) ----
## generation
x <- seq(0,24)
y <- seq(0,24)
beta_1 <- matrix(NA, length(x), length(y))
beta_2 <- matrix(NA, length(x), length(y))
for(i in 1:length(x)){
for(j in 1:length(y)){
beta_1[i,j] <- 1 + (1/12) * (x[i] + y[j])
beta_2[i,j] <- 1 + (1/324)*(36-(6-x[i]/2)^2)*(36-(6-y[j]/2)^2)
}
}
# 1-2 data generating process ----
## independent variables: x1 and x2
x1 <- matrix(rnorm(625, 0, 1), 25, 25)
x2 <- matrix(rnorm(625, 0, 1), 25, 25)
## error term
error <- matrix(rnorm(625, 0, 0.5^2), 25, 25)
## dependent varible: y
var_y <- 3 + x1*beta_1 + x2*beta_2 + error
# 1-3 combine data ----
data_dgp <- data.frame(var_x1 = c(x1),
var_x2 = c(x2),
var_y  = c(var_y),
coord_x = rep(0:24, each=25),
coord_y = rep(0:24, times=25),
beta_1 = c(beta_1),
beta_2 = c(beta_2),
beta_0 = 3)
# 2-1 mgwr ----
coordinates(data_dgp) <- c("coord_x","coord_y") # SpatialPointsDataFrame-class
class(data_dgp)
GWR_model_multi <- gwr.multiscale(var_y ~ var_x1 + var_x2, data = data_dgp,
bws0 = c(0,0,0),
kernel = "bisquare",
hatmatrix = T)
## coefficient estimation
data_dgp$beta0_gwr <- GWR_model_multi$SDF$Intercept
data_dgp$beta1_gwr <- GWR_model_multi$SDF$var_x1
data_dgp$beta2_gwr <- GWR_model_multi$SDF$var_x2
## loss of coefficient (RMSE)
RMSE_0_gwr <- sqrt(mean((data_dgp$beta0_gwr - data_dgp$beta_0)^2))
RMSE_1_gwr <- sqrt(mean((data_dgp$beta1_gwr - data_dgp$beta_1)^2))
RMSE_2_gwr <- sqrt(mean((data_dgp$beta2_gwr - data_dgp$beta_2)^2))
# 2-2 bs ----
## prepare for knots (need to be in range [0,1])
xx <- seq(0,24,length.out=25)
yy <- seq(0,24,length.out=25)
xy <- matrix(NA, nrow = length(xx)*length(yy),ncol=2)
for(ii in 1:length(xx)){
for(jj in 1:length(yy)){
xy[(ii - 1)*25 + (jj),] <- c(xx[ii],yy[jj])
}
}
## model
k=50
bs <- mrts(knot = xy, k = k)
#
beta0_bs <- matrix(NA, nrow(bs), k)
beta1_bs <- matrix(NA, nrow(bs), k)
beta2_bs <- matrix(NA, nrow(bs), k)
#
AIC_bs_vt <- c()
# loss of coefficient (RMSE)
RMSE_0_bs_vt <- c()
RMSE_1_bs_vt <- c()
RMSE_2_bs_vt <- c()
for(i in 1:k){
var_star <- cbind(bs[,1:i],
bs[,1:i]*data_dgp$var_x1,
bs[,1:i]*data_dgp$var_x2)
BS_model <- lm(data_dgp$var_y ~ var_star - 1)
alpha_selected <- BS_model$coefficients
## AIC
AIC_bs_vt[i] <- AIC(BS_model)
## coefficient estimation
beta0_bs[,i] <- bs[,1:i] %*% matrix(alpha_selected[1:i],i,1)
beta1_bs[,i] <- bs[,1:i] %*% matrix(alpha_selected[(i+1):(2*i)],i,1)
beta2_bs[,i] <- bs[,1:i] %*% matrix(alpha_selected[(2*i+1):(3*i)],i,1)
## loss of coefficient (RMSE)
RMSE_0_bs_vt[i] <- sqrt(mean((beta0_bs[,i] - data_dgp$beta_0)^2))
RMSE_1_bs_vt[i] <- sqrt(mean((beta1_bs[,i] - data_dgp$beta_1)^2))
RMSE_2_bs_vt[i] <- sqrt(mean((beta2_bs[,i] - data_dgp$beta_2)^2))
}
## choose k
k_min <- which.min(AIC_bs_vt)
# 2-2 mbs ----
# multiscale parameter space (stepwise)
k_min_vt <- c(k_min, k_min, k_min)
function_k_candidate <- function(k_min_vt){
a <- k_min_vt[1]
b <- k_min_vt[2]
c <- k_min_vt[3]
result <- matrix(c(a, b, c,
a+1, b, c,
a, b+1, c,
a, b, c+1,
a-1, b, c,
a, b-1, c,
a, b, c-1), 7, 3, byrow = T)
return(result)
}
index <- 0
while(index != 1){
k_candidate <- function_k_candidate(k_min_vt)
AIC_bs_vt <- c()
for(i in 1:nrow(k_candidate)){
var_star <- cbind(bs[,1:k_candidate[i,1]],
bs[,1:k_candidate[i,2]]*data_dgp$var_x1,
bs[,1:k_candidate[i,3]]*data_dgp$var_x2)
BS_model <- lm(data_dgp$var_y ~ var_star - 1)
alpha_selected <- BS_model$coefficients
## AIC
AIC_bs_vt[i] <- AIC(BS_model)
}
k_min_vt <- k_candidate[which.min(AIC_bs_vt),]
index <- which.min(AIC_bs_vt)
}
k1 <- k_min_vt[1]
k2 <- k_min_vt[2]
k3 <- k_min_vt[3]
var_star <- cbind(bs[,1:k1],
bs[,1:k2]*data_dgp$var_x1,
bs[,1:k3]*data_dgp$var_x2)
BS_model <- lm(data_dgp$var_y ~ var_star - 1)
alpha_selected <- BS_model$coefficients
## coefficient estimation
beta0_bs <- bs[,1:k1] %*% matrix(alpha_selected[1:k1],k1,1)
beta1_bs <- bs[,1:k2] %*% matrix(alpha_selected[(k1+1):(k1+k2)],k2,1)
beta2_bs <- bs[,1:k3] %*% matrix(alpha_selected[(k1+k2+1):(k1+k2+k3)],k3,1)
## loss of coefficient (RMSE)
RMSE_0_bs <- sqrt(mean((beta0_bs - data_dgp$beta_0)^2))
RMSE_1_bs <- sqrt(mean((beta1_bs - data_dgp$beta_1)^2))
RMSE_2_bs <- sqrt(mean((beta2_bs - data_dgp$beta_2)^2))
# output ----
return(c(RMSE_0_gwr, RMSE_1_gwr, RMSE_2_gwr,
RMSE_0_bs, RMSE_1_bs, RMSE_2_bs))
}
save.image(file = "function-sim_design_1_RMSE_multiscale.RData")
getwd()
# 3-1 load function ----
rm(list=ls())
# load(file = "function-sim_design_1_RMSE.RData")
load(file = "function-sim_design_1_RMSE_multiscale.RData")
ptm <- proc.time()
m <- 2
RMSE_mt <- replicate(m, sim_design_1_RMSE())
proc.time() - ptm
RMSE_df <- t(RMSE_mt)
colnames(RMSE_df) <- c("gwr 0", "gwr 1", "gwr 2", "bs 0", "bs 1", "bs 2")
# setwd("~/Documents/3_Research/201810_GWR/R output/2_simulation_paper")
# png(file = "RMSE.png",
# height = 6, width = 6, units = 'in', res = 300)
# plot.new()
boxplot(RMSE_df, ylim = c(0, max(RMSE_df)), las=1, ylab = "RMSE")
box()
ptm <- proc.time()
m <- 10
RMSE_mt <- replicate(m, sim_design_1_RMSE())
proc.time() - ptm
RMSE_df <- t(RMSE_mt)
colnames(RMSE_df) <- c("gwr 0", "gwr 1", "gwr 2", "bs 0", "bs 1", "bs 2")
# setwd("~/Documents/3_Research/201810_GWR/R output/2_simulation_paper")
# png(file = "RMSE.png",
# height = 6, width = 6, units = 'in', res = 300)
# plot.new()
boxplot(RMSE_df, ylim = c(0, max(RMSE_df)), las=1, ylab = "RMSE")
box()
4163/60
setwd("~/Documents/3_Research/201810_GWR/R output/2_simulation_paper")
png(file = "RMSE_multi.png",
height = 6, width = 6, units = 'in', res = 300)
plot.new()
boxplot(RMSE_df, ylim = c(0, max(RMSE_df)), las=1, ylab = "RMSE")
box()
dev.off()
rm(list=ls())
setwd("~/Documents/3_Research/201810_GWR/script/2_simulation_mgwrpaper")
load(file = "function-sim_design_1_RMSE.RData")
# load(file = "function-sim_design_1_RMSE_multiscale.RData")
# 3-2 compare RMSE under multiple simulation ----
ptm <- proc.time()
m <- 10
RMSE_mt <- replicate(m, sim_design_1_RMSE())
